c4stream_read
        public static ulong c4stream_read(C4ReadStream *stream, byte[] buffer, int count, C4Error *outError)
        {
            return NativeRaw.c4stream_read(stream, buffer, (UIntPtr)count, outError).ToUInt64();
        }


c4db_enumerateSomeDocs
        public static C4DocEnumerator* c4db_enumerateSomeDocs(C4Database *database,
                                                              string[] docIDs,
                                                              C4EnumeratorOptions *options,
                                                              C4Error *outError)
        {
            var c4Strings = new C4String[docIDs.Length];
            for(int i = 0; i < docIDs.Length; i++) {
                c4Strings[i] = new C4String(docIDs[i]);
            }

            try {
                var c4Slices = c4Strings.Select(x => x.AsC4Slice()).ToArray();
                return NativeRaw.c4db_enumerateSomeDocs(database, c4Slices, (UIntPtr)c4Slices.Length, options, outError);
            } finally {
                foreach(var s in c4Strings) {
                    s.Dispose();
                }
            }
        }


c4doc_put
        public static C4Document* c4doc_put(C4Database *database, 
                                            C4DocPutRequest *request, 
                                            ulong* outCommonAncestorIndex, 
                                            C4Error *outError)
        {
            var uintptr = new UIntPtr();
            var retVal = NativeRaw.c4doc_put(database, request, &uintptr, outError);
            if(outCommonAncestorIndex != null) {
                *outCommonAncestorIndex = uintptr.ToUInt64();
            }

            return retVal;
        }


c4dbobs_getChanges
        public static uint c4dbobs_getChanges(C4DatabaseObserver* observer, C4Slice[] outDocIDs, uint maxChanges, C4SequenceNumber* outLastSequence, bool* outExternal)
        {
            var c4Strings = new C4String[outDocIDs.Length];
            for(int i = 0; i < outDocIDs.Length; i++) {
                c4Strings[i] = new C4String(outDocIDs[i]);
            }

            try {
                var c4Slices = c4Strings.Select(x => x.AsC4Slice()).ToArray();
                return NativeRaw.c4dbobs_getChanges(observer, c4Slices, (UIntPtr)c4Slices.Length, maxChanges, outLastSequence, outExternal);
            } finally {
                foreach(var s in c4Strings) {
                    s.Dispose();
                }
            }
        }

