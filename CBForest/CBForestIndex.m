//
//  CBForestIndex.m
//  CBForest
//
//  Created by Jens Alfke on 4/1/14.
//  Copyright (c) 2014 Couchbase. All rights reserved.
//

#import "CBForestIndex.h"
#import "CBForestPrivate.h"
#import "CBForestDocEnumerator.h"
#import "CBCollatable.h"
#import "varint.h"
#import <forestdb.h>


id kCBForestIndexNoValue;


@implementation CBForestIndex


+ (void) initialize {
    if (!kCBForestIndexNoValue)
        kCBForestIndexNoValue = [[NSObject alloc] init];
}


- (BOOL) _removeOldRowsForDoc: (NSData*)collatebleDocID {
    NSData* oldSeqData;
    if (![self getValue: &oldSeqData meta: NULL forKey: collatebleDocID error: NULL])
        return NO;
    if (!oldSeqData.length)
        return NO;
    // Decode a series of sequences from packed varint data:
    slice seqBuf = DataToSlice(oldSeqData);
    uint64_t seq;
    while (ReadUVarInt(&seqBuf, &seq)) {
        // ...and delete the old key/values with those sequences:
        [self deleteSequence: seq error: NULL];
    }
    return YES;
}


- (void) _recordNewRows: (NSArray*)sequences forDoc: (NSData*)collatableDocID {
    // Encode the new sequences into a packed series of varints:
    NSMutableData* seqData = nil;
    if (sequences.count) {
        seqData = [NSMutableData dataWithLength: sequences.count*kMaxVarintLen64];
        slice seqBuf = DataToSlice(seqData);
        for (NSNumber* seq in sequences)
            WriteUVarInt(&seqBuf, seq.unsignedLongLongValue);
        seqData.length = seqBuf.buf - seqData.mutableBytes;
    }
    [self setValue: seqData
              meta: nil
            forKey: collatableDocID
             error: NULL];

}


- (BOOL) setKeys: (NSArray*)keys
          values: (NSArray*)values
     forDocument: (NSString*)docID
      atSequence: (CBForestSequence)docSequence
           error: (NSError**)outError
{
    return [self inTransaction: ^BOOL {
        // Remove any old key/value pairs previously generated by this document:
        NSData* collatableDocID = CBCreateCollatable(docID);
        BOOL hadRows = [self _removeOldRowsForDoc: collatableDocID];

        // Add the key/value pairs:
        NSMutableArray* seqs = nil;
        NSUInteger count = keys.count;
        if (count > 0) {
            seqs = [[NSMutableArray alloc] initWithCapacity: count];
            NSMutableData* keyData = [NSMutableData dataWithCapacity: 1024];
            for (NSUInteger i = 0; i < count; i++) {
                @autoreleasepool {
                    keyData.length = 0;
                    CBCollatableBeginArray(keyData);
                    CBAddCollatable(keys[i], keyData);
                    CBAddCollatable(docID, keyData);
                    CBAddCollatable(@(docSequence), keyData);
                    CBCollatableEndArray(keyData);

                    NSData* bodyData;
                    id value = values[i];
                    if (value != kCBForestIndexNoValue) {
                        bodyData = JSONToData(value, NULL);
                        if (!bodyData) {
                            NSLog(@"WARNING: Can't index non-JSON value %@", value);
                            continue;
                        }
                    } else {
                        // Can't use an empty value or ForestDB will just delete the doc instead
                        // (MB-10915)
                        bodyData = [[NSData alloc] initWithBytes: "\0" length: 1];
                    }

                    CBForestSequence seq = [self setValue: bodyData
                                                     meta: nil
                                                   forKey: keyData
                                                    error: outError];
                    if (seq == kCBForestNoSequence)
                        return NO;
                    [seqs addObject: @(seq)];
                    //NSLog(@"INDEX: Seq %llu = %@ --> %@", seq, keyData, body);
                }
            }
        }

        // Update the list of sequences used for this document:
        if (hadRows || seqs.count > 0)
            [self _recordNewRows: seqs forDoc: collatableDocID];
        return YES;
    }];
}


- (BOOL) queryStartKey: (id)startKey
            startDocID: (NSString*)startDocID
                endKey: (id)endKey
              endDocID: (NSString*)endDocID
               options: (const CBForestEnumerationOptions*)options
                 error: (NSError**)outError
                 block: (CBForestQueryCallbackBlock)block
{
    // Remember, the underlying keys are of the form [emittedKey, docID, serial#]
    NSMutableArray* realStartKey = [NSMutableArray arrayWithObjects: startKey, startDocID, nil];
    NSMutableArray* realEndKey = [NSMutableArray arrayWithObjects: endKey, endDocID, nil];
    NSMutableArray* maxKey = (options && options->descending) ? realStartKey : realEndKey;
    [maxKey addObject: @{}];

    CBForestEnumerator* e = [self enumerateDocsFromKey: CBCreateCollatable(realStartKey)
                                                 toKey: CBCreateCollatable(realEndKey)
                                               options: options error: outError];
    if (!e)
        return NO;
    while(true) {
        @autoreleasepool {
            CBForestDocument* doc = e.nextObject;
            if (!doc)
                break;
            // Decode the key from collatable form:
            slice indexKey = doc.rawID;
            id key;
            NSString* docID;
            int64_t docSequence;
            CBCollatableReadNext(&indexKey, NO, &key); // array marker
            CBCollatableReadNext(&indexKey, YES, &key);
            CBCollatableReadNext(&indexKey, NO, &docID);
            CBCollatableReadNextNumber(&indexKey, &docSequence);
            NSAssert(key && docID, @"Bogus view key");

            if (options && !options->inclusiveEnd && endKey && [key isEqual: endKey])
                break;

            // Decode the value:
            // if there's no value, the body will be just a null byte (MB-10915)
            NSData* valueData = nil;
            if (doc.bodyLength > 1) {
                valueData = [doc readBody: outError];
                if (!valueData)
                    return NO;
            }
            BOOL stop = NO;
            block(key, valueData, docID, docSequence, &stop);
            if (stop)
                break;
        }
    }
    return YES;
}


@end
